<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Xiaohu&#39;s Blog</title>
    <link>https://xiaohubai.github.io/tags/go/</link>
    <description>Recent content in Go on Xiaohu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 May 2024 13:47:42 +0800</lastBuildDate>
    <atom:link href="https://xiaohubai.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>errgroup使用</title>
      <link>https://xiaohubai.github.io/posts/errgroup%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/errgroup%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;在go中errgroup包的使用，和源码分析&lt;/p&gt;</description>
    </item>
    <item>
      <title>gin参数校验</title>
      <link>https://xiaohubai.github.io/posts/gin%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/gin%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</guid>
      <description>第三方包 # github.com/go-playground/validator/v10 常用参数 # required //必填； len=11 //长度=11； min=3 //如果是数字，验证的是数据大小范围，最小值为3，如果是文本，验证的是最小长度为3， max=6 //如果是数字，验证的是数字最大值为6，如果是文本，验证的是最大长度为6 mail //验证邮箱 gt=3 //对于文本就是长度&amp;gt;=3 lt=6 //对于文本就是长度&amp;lt;=6 翻译中间件 # package middleware import ( &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;github.com/gin-gonic/gin/binding&amp;#34; &amp;#34;github.com/go-playground/locales/en&amp;#34; &amp;#34;github.com/go-playground/locales/zh&amp;#34; ut &amp;#34;github.com/go-playground/universal-translator&amp;#34; validator &amp;#34;github.com/go-playground/validator/v10&amp;#34; enTranslations &amp;#34;github.com/go-playground/validator/v10/translations/en&amp;#34; zhTranslations &amp;#34;github.com/go-playground/validator/v10/translations/zh&amp;#34; ) func Translations() gin.HandlerFunc { return func(c *gin.Context) { //locale := .GetHeader(&amp;#34;Acept-Language&amp;#34;) locale := &amp;#34;zh&amp;#34; uni := ut.New(en.New(), zh.New()) trans, _ := uni.GetTranslator(locale) v, ok := binding.Validator.Engine().(*validator.Validate) if ok { switch locale { case &amp;#34;zh&amp;#34;: _ = zhTranslations.</description>
    </item>
    <item>
      <title>gin记录请求,返回结果日志</title>
      <link>https://xiaohubai.github.io/posts/gin%E8%AE%B0%E5%BD%95%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/gin%E8%AE%B0%E5%BD%95%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;p&gt;gin的使用如何收集请求返回结果到日志&lt;/p&gt;</description>
    </item>
    <item>
      <title>gorm自制日志</title>
      <link>https://xiaohubai.github.io/posts/gorm%E8%87%AA%E5%88%B6%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/gorm%E8%87%AA%E5%88%B6%E6%97%A5%E5%BF%97/</guid>
      <description>第三方包 # gorm.io/gorm/logger 示例 # package boot import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/xiaohubai/alpha/config&amp;#34; &amp;#34;go.uber.org/zap&amp;#34; &amp;#34;gorm.io/gorm/logger&amp;#34; &amp;#34;gorm.io/gorm/utils&amp;#34; ) type cfg struct { SlowThreshold time.Duration Colorful bool LogLevel logger.LogLevel } type traceRecorder struct { logger.Interface BeginAt time.Time SQL string RowsAffected int64 Err error } func (t traceRecorder) New() *traceRecorder { return &amp;amp;traceRecorder{Interface: t.Interface, BeginAt: time.Now()} } func (t *traceRecorder) Trace(ctx context.Context, begin time.Time, fc func() (string, int64), err error) { t.</description>
    </item>
    <item>
      <title>go垃圾回收机制</title>
      <link>https://xiaohubai.github.io/posts/go%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/go%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;go的垃圾回收机制三色标记法和写屏障技术&lt;/p&gt;</description>
    </item>
    <item>
      <title>go接口方法重载</title>
      <link>https://xiaohubai.github.io/posts/go%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/go%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/</guid>
      <description>源码 # package main import &amp;#34;fmt&amp;#34; type Log interface { Error() } type LocalLog struct { Level string `json:&amp;#34;level&amp;#34;` Key string `json:&amp;#34;key&amp;#34;` Msg string `json:&amp;#34;msg&amp;#34;` TraceId string `json:&amp;#34;trace_id&amp;#34;` } type Atta struct { Level string `json:&amp;#34;level&amp;#34;` Key string `json:&amp;#34;key&amp;#34;` Msg string `json:&amp;#34;msg&amp;#34;` TraceId string `json:&amp;#34;trace_id&amp;#34;` AttaId string `json:&amp;#34;atta_id&amp;#34;` } func CommError(obj Log) { obj.Error() } func (l *LocalLog) Error() { fmt.Println(l.Level, l.TraceId) } func (a *Atta) Error() { fmt.Println(a.Level, a.</description>
    </item>
    <item>
      <title>go项目分层设计</title>
      <link>https://xiaohubai.github.io/posts/go%E9%A1%B9%E7%9B%AE%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/go%E9%A1%B9%E7%9B%AE%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1/</guid>
      <description>单系统 Project Layout 介绍 # ├── api (API) │ └── v1 (版本) ├── service (业务层) ├── model (结构体层) ├── dao (数据库操作) ├── middleware (中间件) ├── config (全局配置) ├── boot (初始组件) ├── router (路由控制) ├── plugin (组件具体实现) ├── utils (工具) ├── script (脚本) ├── docs (文档) ├── public (静态文件) ├── log (日志) ├── main.go (入口) ├── go.mod (项目依赖包版本) ├── go.sum (已下载的所有依赖版本) ├── Dockerfile (docker部署文件) └── README.md (项目说明) 大仓微服务 project layout # ├── api //所有proto文件定义，外部引用 │ └── user │ ├── user.</description>
    </item>
    <item>
      <title>zap使用</title>
      <link>https://xiaohubai.github.io/posts/zap/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/zap/</guid>
      <description>第三方包 # go.uber.org/zap zap记录日志 # uber 开源的高性能日志库，面向高性能 package boot import ( &amp;#34;fmt&amp;#34; &amp;#34;path&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/xiaohubai/alpha/config&amp;#34; zaprotatelogs &amp;#34;github.com/lestrrat-go/file-rotatelogs&amp;#34; &amp;#34;go.uber.org/zap&amp;#34; &amp;#34;go.uber.org/zap/zapcore&amp;#34; ) var level zapcore.Level // Zap 日志组件 func Zap() (logger *zap.Logger) { level = zap.InfoLevel logger = zap.New(getEncoderCore()) logger.WithOptions(zap.AddCaller()) return logger } func getEncoderCore() (core zapcore.Core) { writer, err := GetWriteSyncer() // 使用file-rotatelogs进行日志分割 if err != nil { panic(fmt.Errorf(&amp;#34;Get Write Syncer Failed err:%v&amp;#34;, err.Error())) } return zapcore.NewCore(zapcore.NewJSONEncoder(getEncoderConfig()), writer, level) } func getEncoderConfig() (cfg zapcore.</description>
    </item>
    <item>
      <title>控制协程运行时间</title>
      <link>https://xiaohubai.github.io/posts/%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</link>
      <pubDate>Wed, 08 May 2024 13:47:42 +0800</pubDate>
      <guid>https://xiaohubai.github.io/posts/%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</guid>
      <description>&lt;p&gt;go控制协程运行时间，使用context.WithTimeout(newCtx, timeout)，用recover捕获异常情况&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
